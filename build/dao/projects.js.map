{"version":3,"sources":["../src/dao/projects.ts"],"names":[],"mappings":";;AACA,gDAAqC;AACrC,oCAAoC;AAGpC,gBAAuB,OAAwB;IAC7C,MAAM,CAAC,eAAE,CAAC,OAAO;SACd,MAAM,CAAC;QACN,IAAI,EAAE,OAAO,CAAC,IAAI;QAClB,WAAW,EAAE,OAAO,CAAC,WAAW;QAChC,MAAM,EAAE,OAAO,CAAC,MAAM;KACvB,CAAC,CAAC;AACP,CAAC;AAPD,wBAOC;AAED;IACE,MAAM,CAAC,eAAE,CAAC,OAAO;SACd,OAAO,EAAE,CAAA;AACd,CAAC;AAHD,0BAGC;AAED,iBAAwB,OAAwB;IAC9C,MAAM,CAAC,eAAE,CAAC,OAAO;SACd,OAAO,CAAC;QACP,KAAK,EAAE;YACL,EAAE,EAAE,OAAO,CAAC,EAAE;SAChB;KACD,CAAC,CAAA;AACN,CAAC;AAPD,0BAOC;AAED,cAAqB,OAAwB;IAC3C,MAAM,CAAC,eAAE,CAAC,OAAO;SACd,IAAI,CAAC;QACJ,KAAK,EAAE;YACL,EAAE,EAAE,OAAO,CAAC,EAAE;SAChB;KACD,CAAC,CAAA;AACN,CAAC;AAPD,oBAOC;AAED,gBAAuB,OAAwB;IAC7C,MAAM,CAAC,IAAI,OAAO,CAAM,CAAC,OAAO,EAAE,MAAM,EAAC,EAAE;QACzC,eAAE,CAAC,OAAO;aACT,IAAI,CAAC;YACJ,KAAK,EAAE;gBACL,EAAE,EAAE,OAAO,CAAC,EAAE;aAChB;SACD,CAAC;aACD,IAAI,CAAC,EAAE,CAAC,EAAE;YACT,EAAE,CAAA,CAAC,EAAE,CAAC;gBACH,MAAM,CAAC,EAAE,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAA;YACtC,IAAI;gBACD,MAAM,CAAC,qCAAqC,CAAC,CAAA;QAClD,CAAC,CAAC;aACD,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;aACzB,IAAI,CAAC,GAAG,CAAC,EAAE;YACR,OAAO,CAAC,GAAG,CAAC,CAAA;QACd,CAAC,CAAC;aACH,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAA;IACpC,CAAC,CAAC,CAAA;AACJ,CAAC;AApBD,wBAoBC","file":"projects.js","sourcesContent":["import * as uuid from 'uuid'\nimport db from '../sqlz/models/index'\nimport * as Promise from 'bluebird';\nimport { ProjectInstance } from '../sqlz/models/project'\n\nexport function create(project: ProjectInstance): Promise<any> {\n  return db.Project\n    .create({\n      name: project.name,\n      description: project.description,\n      status: project.status\n    });\n}\n\nexport function findAll(): Promise<any> {\n  return db.Project\n    .findAll()\n}\n\nexport function destroy(project: ProjectInstance): Promise<any> {\n  return db.Project\n    .destroy({\n      where: {\n        id: project.id\n     }\n    })\n}\n\nexport function find(project: ProjectInstance): Promise<any> {\n  return db.Project\n    .find({\n      where: {\n        id: project.id\n     }\n    })\n}\n\nexport function update(project: ProjectInstance): Promise<any> {\n  return new Promise<any>((resolve, reject)=>{\n    db.Project\n    .find({\n      where: {\n        id: project.id\n     }\n    })    \n    .then(fp => {\n      if(fp)\n         return fp.updateAttributes(project)\n      else \n         reject(\"identified project is not available\")\n    })\n    .catch(error => reject(error))\n        .then(ufp => {\n            resolve(ufp)\n          })\n        .catch(error => reject(error))\n  })\n}"],"sourceRoot":"../../src"}